1、箭头函数和普通函数区别？
    普通函数this：
      1、this总是代表它的直接调用者。
      2、在默认情况下，没找到直接调用者，this指的是window。
      3、在严格模式下，没有直接调用者的函数中的this是undefined。
      4、使用call,apply,bind绑定，this指的是绑定的对象。
    箭头函数this：
	  1、箭头函数没有[Construct]所以不能new所以也不能new.target 不能super 没有this 不能apply call bind
      1、在使用=>定义函数的时候，this的指向是 定义时所在的对象，而不是使用时所在的对象；
      2、不能够用作构造函数，这就是说，不能够使用new命令，否则就会抛出一个错误；
      3、不能够使用 arguments 对象
      4、不能使用 yield 命令；
    
2、讲一下let、var、const的区别？
    .var 没有块级作用域，支持变量提升。
    .let 有块级作用域，不支持变量提升。不允许重复声明，暂存性死区。不能通过window.变量名进行访问.
    .const 有块级作用域，不支持变量提升，不允许重复声明，暂存性死区。声明一个变量一旦声明就不能改变，改变报错。

3、原型、原型链
    原型链：
    每个被实例对象都有__proto__对象，它指向了构造该对象的构造函数的prototype属性。同时该对象可以通过__proto__对象来寻找不属于自身的属性.
    原型：
    就是实现继承过程中产生的一个概念.

4、js继承的6种方式
    想要继承，就必须要提供个父类（继承谁，提供继承的属性）
    .原型链继承  
    .构造函数继承
    .组合继承
    .原型式继承
    .寄生式继承
    .寄生组合式继承

5、闭包
    闭包就是有权访问一个函数内部变量的函数，也就是常说的函数内部嵌套函数，内部函数访问外部函数变量，从而导致垃圾回收机制没有将当前变量回收掉。
    这样的操作，有可能会带来内存泄漏。好处就是可以设计私有的方法和变量。

6、深浅拷贝
    1、浅拷贝
    通常需要拷贝的对象内部只有一层的这种对象。
    常用的方法:
    .Object.assign方法来实现
    .扩展运算符 ...obj

    2、深拷贝
    通常是嵌套二层或以上的复杂对象
    常用方法
    .JSON.parse(JSON.stringfy(object)); 该方法忽略掉undefined、忽略Symbol、忽略function。只适合简单深拷贝
    .手写递归方法去实现
    .通过第三方库提供的深拷贝实现。

7、函数的节流和防抖

    1、防抖函数：将多次触发变成最后一次触发；
    2、节流函数：将多次执行变成每隔一个时间节点去执行的函数

//Dom渲染流程、Http工作流程、get和post区别、父子传值

8、call、apply区别

    相同点：都是重定向this指针的方法。

    不同点：call和apply的第二个参数不相同，call是若干个参数的列表。apply是一个数组

9、bind
    bind方法是直接返回一个新的函数，需要手动去调用才能执行。
    
10、
  
  关于函数的调用
    1、作为一个正常的函数调用
    2、函数作为方法调用
    3、使用构造函数调用函数
    4、作为函数方法调用函数
    
11、捕获和冒泡
  捕获：就是从根元素开始向目标元素递进的一个关系；从上而下
  冒泡：是从目标元素开始向根元素冒泡的过程；想象一下水里的泡泡从下而上
  stopPropagation 通常理解它是用来阻止事件冒泡的，其实该函数也可以阻止捕获事件
  
12、js跨域如何解决
  1、jsonp跨域，原理：script标签没有跨域限制的漏洞实现的一种跨域方法，只支持get请求。安全问题会受到威胁。
  2、cors跨域，通过后端服务器实现，Access-Control-Allow-Origin。
  3、postMessage window的一个属性方法。
  4、websocket
  5、nginx反向代理
  6、iframe跨域
  
13、setTimeout与setInterval的区别

  setTimeout表示间隔一段时间之后执行一次调用，而setInterval是每隔一段时间循环调用，直至清除。

  内存方面，setTimeout只需要进入一次宏队列，setInterval不计算代码执行时间，有可能多次执行多次代码
  
14、DNS是如何解析的？如何优化

  浏览器缓存 -> 本地缓存-> hosts文件 -> 路由器缓存 -> ISP DNS缓存 -> DNS递归查询
  
15、link和import区别
  
    link:
      1、页面被加载，link会同时被加载
      2、只适用与2.1之后的版本
      3、支持使用js去控制dom改变样式
    @import
      1、引用的css会等到页面被加载完成之后再加载。
      2、link是没有任何兼容问题的。
      3、不支持使用js去控制dom改变样式
      4、 只能加载css
      
16、get和post请求的区别
    
    get:
      1、参数长度有限制
      2、get会把请求的数据附加在url上
      3、get是明文传输
      4、请求能缓存
      
    post:
      1、参数长度无限制
      2、post请求会把数据附加在请求体中
      3、post不是明文传输
      4、不能缓存
      
17、http和https区别
    http:
      1、80端口
      2、无需申请证书
      3、超文本传输协议
      4、快
      
    https:
      1、443端口
      2、需要申请证书
      3、ssl加密协议
      4、慢（因为会有一个ssl包需要传输）
  
18、ssl加密

    分为对称和非对称加密
    
    1、对称加密。 客户端和服务端公用一个密钥对消息加解密。（客户端和服务端约定好一个加密钥匙。客户端在发消息浅用该密匙对消息加密，发送给服务器，服务器在用该密匙进行解密拿到消息）
    2、非对称加密。客户端和服务端都有公钥和私钥。公钥加密的内容只有对应的私钥解密。私钥自己留着，公钥发给对方。这样发送消息之前，对方的公钥对消息进行加密，受到后在用自己的私钥进行解密。

19、通信

    1、父传子：父组件通过props的方式传递。
    2、子传父：props+回调函数方式。
    3、兄弟组件：找到这两个共同的父节点，结合props和回调函数进行通信
    4、跨层级通信：context通信
    5、store
20、
prox 、module、class
手动实现Promise 手动实现async await
react-thunk react-saga
grid布局flex布局

21、浏览器异步实现原理
